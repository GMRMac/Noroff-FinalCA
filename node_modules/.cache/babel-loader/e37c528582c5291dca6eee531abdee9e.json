{"ast":null,"code":"import _slicedToArray from \"D:\\\\OneDrive\\\\Noroff\\\\2018-2020_Secound year\\\\07_JavaScript Frameworks 2\\\\Module 3\\\\bootstrap\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\OneDrive\\\\Noroff\\\\2018-2020_Secound year\\\\07_JavaScript Frameworks 2\\\\Module 3\\\\bootstrap\\\\src\\\\components\\\\characters\\\\list\\\\CharacterList.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport { BASE_URL } from \"../../../constants/API\";\nimport \"./CharacterList.css\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport CharacterItem from \"./CharacterItem\";\nimport Search from \"./Search\";\nexport default function CharacterList() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        characters = _useState2[0],\n        setCharacters = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        filteredCharacters = _useState4[0],\n        setFilteredCharacters = _useState4[1];\n\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        loading = _useState6[0],\n        setLoading = _useState6[1]; //    const [inputEmpty, setInputEmpty] = useState(true);\n\n\n  const inputEmpty = {\n    empty: false\n  };\n  useEffect(() => {\n    fetch(BASE_URL).then(response => response.json()).then(json => {\n      setCharacters(json.results);\n      setFilteredCharacters(json.results);\n    }).catch(error => console.log(error)).finally(() => setLoading(false));\n  }, []);\n\n  const filterCards = function (e) {\n    // Let's get the value the user typed in and make it lower case\n    const searchValue = e.target.value.toLowerCase();\n    const inputEmpty = {\n      empty: true\n    }; // Create a new array from the characters array\n\n    const filteredArray = characters.filter(function (char) {\n      // Make each name lowercase so we can check it properly with the search value\n      const lowerCaseName = char.name.toLowerCase(); // Check if the character name begins with the search value\n\n      if (lowerCaseName.startsWith(searchValue)) {\n        // If it does, return true\n        // This will add it to the new filtered array\n        return true;\n      }\n\n      return false;\n    }); // Set filtered characters to the new array\n\n    setFilteredCharacters(filteredArray);\n  };\n\n  if (loading) {\n    return React.createElement(Spinner, {\n      animation: \"border\",\n      className: \"spinner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    });\n  } //    {\n  //        filteredCharacters.map(character => {\n  //            \n  //        });\n  //    }\n\n\n  return React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Search, {\n    handleSearch: filterCards,\n    inputEmpty: inputEmpty,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), filteredCharacters.map(character => {\n    const id = character.id,\n          name = character.name,\n          image = character.image;\n    return React.createElement(Col, {\n      sm: 6,\n      md: 3,\n      key: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(CharacterItem, {\n      id: id,\n      name: name,\n      image: image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }));\n  })) //        <ul>\n  //        {characters.map(c => (\n  //            <li key={c.id}>{c.name}</li>))}\n  //        </ul>\n  ;\n}","map":{"version":3,"sources":["D:/OneDrive/Noroff/2018-2020_Secound year/07_JavaScript Frameworks 2/Module 3/bootstrap/src/components/characters/list/CharacterList.js"],"names":["React","useState","useEffect","Spinner","BASE_URL","Row","Col","CharacterItem","Search","CharacterList","characters","setCharacters","filteredCharacters","setFilteredCharacters","loading","setLoading","inputEmpty","empty","fetch","then","response","json","results","catch","error","console","log","finally","filterCards","e","searchValue","target","value","toLowerCase","filteredArray","filter","char","lowerCaseName","name","startsWith","map","character","id","image"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { BASE_URL } from \"../../../constants/API\";\r\nimport \"./CharacterList.css\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport CharacterItem from \"./CharacterItem\";\r\nimport Search from \"./Search\";\r\n\r\nexport default function CharacterList(){\r\n     \r\n    const [characters,setCharacters] = useState([]);\r\n    const [filteredCharacters, setFilteredCharacters] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n//    const [inputEmpty, setInputEmpty] = useState(true);\r\n    const inputEmpty = {\r\n        empty: false,\r\n    };\r\n    \r\n    useEffect(() => {\r\n        fetch(BASE_URL)\r\n            .then(response => response.json())\r\n            .then(json => {setCharacters(json.results)\r\n                           setFilteredCharacters(json.results)\r\n                          })\r\n            .catch(error => console.log(error))\r\n            .finally(() => setLoading(false));\r\n    }, []);\r\n    \r\n    const filterCards = function(e){\r\n        // Let's get the value the user typed in and make it lower case\r\n        const searchValue = e.target.value.toLowerCase();\r\n        \r\n        const inputEmpty = {empty: true}\r\n        // Create a new array from the characters array\r\n        const filteredArray = characters.filter(function(char){\r\n            // Make each name lowercase so we can check it properly with the search value\r\n            const lowerCaseName = char.name.toLowerCase();\r\n            \r\n            // Check if the character name begins with the search value\r\n            if (lowerCaseName.startsWith(searchValue)){\r\n                // If it does, return true\r\n                // This will add it to the new filtered array\r\n                return true;\r\n            }\r\n            return false;\r\n        })\r\n        \r\n        // Set filtered characters to the new array\r\n        setFilteredCharacters(filteredArray)\r\n    }\r\n    \r\n    if (loading) {\r\n        return <Spinner animation=\"border\" className=\"spinner\" />\r\n    }\r\n        \r\n//    {\r\n//        filteredCharacters.map(character => {\r\n//            \r\n//        });\r\n//    }\r\n    \r\n    return (\r\n        <Row>\r\n            <Search handleSearch={filterCards} inputEmpty={inputEmpty}/>\r\n            {filteredCharacters.map(character => {\r\n                const {id, name, image} = character;\r\n        \r\n                return (\r\n                    <Col sm={6} md={3} key={id}>\r\n                        <CharacterItem id={id} name={name} image={image} />\r\n                    </Col>\r\n                )\r\n            })}\r\n        </Row>\r\n//        <ul>\r\n//        {characters.map(c => (\r\n//            <li key={c.id}>{c.name}</li>))}\r\n//        </ul>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}